# -*- coding: utf-8 -*-
"""MCA_A2_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16sKA-flUVnOMf_7VzqzZvJnavzoMLZlH
"""

from google.colab import drive
drive.mount('/content/drive')

#import the pyplot and wavfile modules 
import matplotlib.pyplot as plot
from scipy.io import wavfile 
import numpy as np
#reference - https://gist.github.com/kastnerkyle/179d6e9a88202ab0a2fe 
# I have used this reference for majorly all the methods

##################### FFT Implementation ########################
import math
import os
import numpy as np
import matplotlib.pyplot as plt
from scipy.io import wavfile



def stft(X,real, fftsize=128, step=65, mean_normalize=True, compute_onesided=True): 
    if real:
        local_fft = np.fft.rfft
        cut = -1
    else:
        local_fft = np.fft.fft
        cut = None
    if compute_onesided:
        cut = fftsize // 2
    if mean_normalize:
        X -= X.mean()
    
    pad = np.zeros((fftsize - len(X) % fftsize))
    X = np.hstack((X, pad))
    isvalid = len(X) - fftsize
    nw = (isvalid) // step
    out = np.ndarray((nw, fftsize), dtype=X.dtype)
    for i in np.arange(nw):  
      initial = i * step
      end = initial + fftsize
      out[i] = X[initial:end]
    X = out   
    size = fftsize
    win = 0.54 - 0.46 * np.cos(2 * np.pi * np.arange(size) / (size - 1))
    X = X * win[None]
    X = local_fft(X)[:, :cut]
    return X


def spectrogram(d, log, thresh, fft_size, stride):
    s_gram = np.abs(stft(d, False, fftsize=fft_size, step=stride, compute_onesided=True))
    if log == False:
      s_gram[s_gram < thresh] = thresh 
    else:
        s_gram =  np.log10(s_gram/s_gram.max())  
        s_gram[s_gram < -thresh] = -thresh
    return s_gram


#fft_win_size = 2048  # window size for the FFT
#step_size = fft_win_size // 16  # distance to slide along the window (in time)
#spec_thresh = 4  # threshold for spectrograms (lower filters out more noise)
#mywav = "/content/drive/My Drive/MCA/Assignment 2/Dataset/training/41777abb_nohash_0.wav"
#rate, data = wavfile.read(mywav)

#wav_spectrogram = spectrogram(data.astype("float64"),True,spec_thresh,fft_win_size,step_size)

#fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(20, 4))
#cax = ax.matshow(np.transpose(wav_spectrogram),aspect="auto",origin="lower")
#ax.axes.get_xaxis().set_ticks([])
#ax.axes.get_yaxis().set_ticks([])
#fig.show()
#fig.savefig("/content/drive/My Drive/MCA/Assignment 2/Dataset/41777abb_nohash_0.png",bbox_inches='tight', pad_inches=0)

###################### use the code below for creating spectrogram from folders

fft_win_size = 2048  
step_size = fft_win_size // 16  
spec_thresh = 4  
source = "/content/drive/My Drive/MCA/Assignment 2/Dataset/validation/zero/"
destination = "/content/drive/My Drive/MCA/Assignment 2/Dataset/test_spect/zero/"

for filename in os.listdir(source):
    
        mywav = source+filename
        rate, data = wavfile.read(mywav)
        wav_spectrogram = spectrogram(data.astype("float64"),True,spec_thresh,fft_win_size,step_size)
        fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(20, 4))
        cax = ax.matshow(np.transpose(wav_spectrogram),aspect="auto",origin="lower")
        ax.axes.get_xaxis().set_ticks([])
        ax.axes.get_yaxis().set_ticks([])
        #fig.show()
        fig.savefig(destination+filename.split('.')[0]+".png",bbox_inches='tight', pad_inches=0)
        plt.close()

