# -*- coding: utf-8 -*-
"""mca_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BTTv1loOikF7fFLp0HKq8GO6tqvt3Ssh
"""

from google.colab import drive
drive.mount('/content/drive')

#referrence - https://www.di.ens.fr/willow/teaching/recvis10/assignment1/
#referrence - https://medium.com/@akumar5/computer-vision-gaussian-filter-from-scratch-b485837b6e09
#referrence - https://en.wikipedia.org/wiki/Blob_detection#Grey-level_blobs,_grey-level_blob_trees_and_scale-space_blobs

import numpy as np
import cv2
import math
import matplotlib.pyplot as plt
from matplotlib.patches import Circle


image = cv2.imread("butterfly.jpg",0)

sigma = 1
k = 1.3

def Laplacia_Gaussian(image,sigma,itr,k):
    def filt(sigma):
        conv_win_size = int(sigma*6)
        x = np.arange(-conv_win_size//2,conv_win_size//2+1,1).reshape(conv_win_size+1,1)
        x=x.T
        y = np.arange(-conv_win_size//2,conv_win_size//2+1,1).reshape(conv_win_size+1,1)
        numerator = ((y*y)+(x*x)-2*(sigma**2))
        denominator = ((2*math.pi*(sigma**4)))
        y_filter = np.exp(-(y**2/(2.*sigma**2)))
        x_filter = np.exp(-(x**2/(2.*sigma**2)))    
        multiply = x_filter*y_filter
        log = (numerator@multiply)/denominator
        return (log)
    
    img_val = []
    i = 0
    while(i<itr):
        new_sig = sigma*(k**i)
        im = image
        f_img = cv2.filter2D(image,-1,filt(new_sig))
        #print(np.shape(f_img))
        f_img = np.pad(f_img,((1,1),(1,1)),'constant')
        f_img = np.square(f_img)
        img_val.append(f_img)
        i+=1
    img_val_o = np.asarray(img_val)
    return(img_val_o)
        

def detect_blob(log_image_np):
    co_ord = []
    (height,width) = image.shape
    for i in range(1,height):
        for j in range(1,width):
            slice_img = log_image_np[:,i-1:i+2,j-1:j+2]
            result = np.amax(slice_img)
            result=result/100000
            print(result)
            if result >= 0.09:
                z,x,y = np.unravel_index(slice_img.argmax(),slice_img.shape)
                co_ord.append((i+x-1,j+y-1,k**z*sigma))
    return co_ord

log_image_np = Laplacia_Gaussian(image,sigma,9,k)
#print(log_image_np)
co_ordinates = list(set(detect_blob(log_image_np)))
co_ordinates = np.array(co_ordinates)       
        
fig, im  = plt.subplots()
im.set_aspect('equal')
im.imshow(image,cmap="gray")
for blob in co_ordinates:
    y,x,r = blob
    circle = Circle((x, y), r, color='red', linewidth=0.2, fill=False)
    im.add_patch(circle)
im.plot()  
plt.show()

print(co_ordinates)